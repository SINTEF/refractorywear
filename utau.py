import numpy as np
from scipy.interpolate import interp1d


# This creates a function u_tau at the rate vdot by using linear interpolation
# How to use :
# u_tau_0 = u_tau(qgas)
# xh = 0.5
# u_tau=u_tau_0(xh)
def u_tau(vdot):
    xh = np.array([0.0, 5.00E-02, 8.33E-02, 1.17E-01, 1.50E-01, 1.83E-01,
                   2.17E-01, 2.50E-01, 2.83E-01, 3.17E-01, 3.50E-01,
                   3.83E-01, 4.17E-01, 4.50E-01, 4.83E-01, 5.17E-01,
                   5.50E-01, 5.83E-01, 6.17E-01, 6.50E-01, 6.83E-01,
                   7.17E-01, 7.50E-01, 7.83E-01, 8.17E-01, 8.50E-01,
                   8.83E-01, 9.17E-01, 9.50E-01, 9.83E-01, 1.0])
    utau1200 = np.array([0, 0.00612232, 0.009297699, 0.012087404, 0.014502046,
                         0.016662293, 0.018674546, 0.020603786, 0.022489553,
                         0.024382015, 0.026298796, 0.028240113, 0.030214875,
                         0.032248721, 0.0343215, 0.036420324, 0.038533795,
                         0.040644967, 0.042755429, 0.044813242, 0.04677649,
                         0.048576126, 0.050128369, 0.051302632, 0.051948179,
                         0.052129966, 0.052082499, 0.051074586, 0.047587814,
                         0.037726383, 0.0])

    tmp = utau1200*(vdot/1200.0)**0.3729

    return interp1d(xh, tmp)


def Tauw_003bar(x, Q):
    return ((-0.05201+x*23.857)/(1+x*(-1.607)+x**2*0.962))*(6.8377+Q*0.02009)/(6.8377+1200*0.02009)


def Tauw_1bar(x, Q):
    return ((-0.0736+x*5.69)/(1+x*(-1.73)+x**2*1.03))*(2.0563+0.005369*Q)/(2.0563+0.005369*1200)


def Tauw(x, Q, P):
    return (Tauw_003bar(x, Q)+(Tauw_1bar(x, Q)-Tauw_003bar(x, Q))*(P-0.003)/(1-0.003))


def u_tauP(x, Q, P, rho):
    return np.sqrt(np.abs(Tauw(x, Q, P))/rho)
